# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

permissions:
  contents: write

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-24.04, windows-latest]
        build_type: [Debug, Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-24.04
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-24.04
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-24.04
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # Need to generate useful coverage report files
    - name: Install dependencies on Ubuntu
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y lcov gcovr

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}



# =================================================================================================
# Test and coverage steps
    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Coverage
      if: runner.os == 'Linux' && matrix.build_type == 'Debug' && matrix.c_compiler == 'gcc'
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target coverage

    - name: Upload coverage to Codecov (Linux only)
      if: runner.os == 'Linux' && matrix.build_type == 'Debug' && matrix.c_compiler == 'gcc'
      uses: codecov/codecov-action@v4.0.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ${{ steps.strings.outputs.build-output-dir }}/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
# =================================================================================================

# =================================================================================================
# Collect artifacts for each platform and configuration
    - name: IntermediateArtifacts
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target package
  
    - name: Archive Platform Artifacts (Linux)
      if: runner.os == 'Linux' && matrix.cpp_compiler == 'clang++'
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}/package
        zip -r ../platform-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}.zip *

    - name: Archive Platform Artifacts (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Compress-Archive -Path "${{ steps.strings.outputs.build-output-dir }}\package\*" -DestinationPath "${{ steps.strings.outputs.build-output-dir }}\platform-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}.zip"

    - name: Upload Platform Artifacts
      if: (runner.os == 'Linux' && matrix.cpp_compiler == 'clang++') || (runner.os == 'Windows' && matrix.c_compiler == 'cl')
      uses: actions/upload-artifact@v4
      with:
        name: platform-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}
        path: ${{ steps.strings.outputs.build-output-dir }}/platform-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}.zip
# =================================================================================================

# =================================================================================================
# Combine artifacts into a single package
  package:
    needs: build
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y zip unzip

    - name: Download All Platform Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./platform_artifacts

    - name: Unzip Platform Artifacts
      shell: bash
      run: |
        mkdir -p combined_package
        find ./platform_artifacts -type f -name '*.zip' -exec unzip -o {} -d combined_package \;

    - name: Create Herald.zip
      shell: bash
      run: |
        cd combined_package
        zip -r ../Herald.zip .
        cd ..

    - name: Upload Combined Package Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Herald
        path: combined_package/
# =================================================================================================

# =================================================================================================
# Release job
  release:
    needs: package
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Download Combined Package Artifact
      uses: actions/download-artifact@v4
      with:
        name: Herald

    # Debug output showing workding directory and contents of the downloaded artifact
    - name: Debug Download Results
      run: |
        pwd
        ls -lR

    # delete release "latest"
    - name: Delete Release
      uses: softprops/action-delete-release@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: latest

    # create a new "latest" release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: latest
        release_name: Latest Release
        body: |
          This is the latest release.
        draft: false
        prerelease: false

    # Zip Herald
    - name: Zip Herald
      run: |
        cd Herald
        zip -r ../Herald.zip .
        ls -l ..

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Herald.zip
        asset_name: Herald.zip
        asset_content_type: application/zip

# =================================================================================================
